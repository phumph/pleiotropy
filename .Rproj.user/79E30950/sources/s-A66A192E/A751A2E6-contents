#! /usr/bin/Rscript
# script to parse fitness data for diploids and spit out counts of those with mutation data:
# updated: 2018-OCT-16 by PTH
# updated: 2019-APR-11 by PTH

library(here)
library(ggplot2)
library(reshape2)
library(ggpubr)

# load data that was output from adapted caller script:
tsum2 <- read.csv(file = here("data/dBFA2_adapted_calls_20-APR-2018.csv"))

# calculate number of adapted clones per source:
ttt <- data.frame(table(tsum2$adapted,tsum2$Subpool.Environment)) %>% dplyr::arrange(desc(Var1),desc(Freq))

# scrub levels that don't make sense; re-order:
ttt <- ttt[!ttt$Var2 %in% c('none','not_read'),]
ttt$Var2 <- factor(ttt$Var2, levels = paste0(unique(ttt$Var2)))

# supply text annotations for percent adapted:
ttt2 <- reshape2::dcast(ttt, Var2 ~ Var1, value.var = 'Freq')
names(ttt2) <- c('source','non_adapted','adapted')
ttt2 <- dplyr::mutate(ttt2, perc = adapted / (adapted + non_adapted))

# produce plot
clone_counts_2N <- ggplot() + 
  geom_bar(data = ttt, aes(x = Var2, y = Freq, fill = Var1), stat = 'identity', position = position_dodge(0.5), alpha = 0.5) +
  theme_pth1() + scale_fill_manual(values = c('gray40','dodgerblue'), name = 'adapted') +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  ylab("number of unique BCs with fitness data") + 
  xlab("source environment") +
  scale_y_continuous(limits = c(-20,600), breaks = seq(0,600,100)) +
  annotate(geom = "text", label = paste0(round(ttt2$perc,2)), x = ttt2$source, y = -20, size = 2)

# save:
ggsave(filename = here("plt_figs/2N_adapted_clones_breakdown.pdf"), width = 5, height = 3.5)


#### ADDING MUTATION DATA ####

md <- read.table(here("data/mutations/mutations_final_filter_2N_2018-OCT-11.txt"),F,'\t')
md2 <- read.table(here("data/mutations/mutations_IG_2N.txt"),F,'\t')
md <- unique(rbind(md[,c(1:2)],md2[,c(1:2)])) # 402 diploid genomes


#### NEW as of 2019-APR-11: parse and process new 2N mutation calls ####

dip_files <- lapply(as.list(Sys.glob(here("data/mutations/2019-APR-11/orig_yuping/*.txt"))), function(x) read.table(x, header=T,sep='\t'))

# parse each file to get same format as prior 2N mutation file:
sort_dip_files <- function(x){
  x2 <- x[,names(x) %in% c('Strain','CHROM','POS','REF','ALT','EFFECT','IMPACT','GENE','BIOTYPE')]
  return(x2)
}

dip_files2 <- lapply(dip_files, function(x) sort_dip_files(as.data.frame(x)))
dip_files3 <- do.call(rbind,dip_files2)


# bring in strain-to-BC mapping file and associate previous barcodes with each sample:
BC_map <- read.table(here("data/mutations/2019-APR-11/2019-APR-11_old_new_BC_mapping_file.txt"),T)
dip_files4 <- merge(dip_files3,BC_map,by.x='Strain',by.y='lucas_strain_id',sort=F)

# re-defining md as new mutation set:
md <- unique(dip_files4[,c('Strain','Diverse.BC')])

#### Resuming prior routine ####

# fix the way the barcodes are reported to jibe with fitness data:
# md$Diverse.BC <- sapply(md$V2, function(x) unlist(strsplit(paste0(x),'_'))[1])
# md$Environment.BC <- sapply(md$V2, function(x) unlist(strsplit(paste0(x),'_'))[2])
tsum2$mutation <- sapply(tsum2$Diverse.BC, function(x) paste0(x) %in% paste0(md$Diverse.BC))

# now look at mutation data to see how many actually have fitness data:
md$has_fitness <- sapply(md$Diverse.BC, function(x) paste0(x) %in% paste0(tsum2$Diverse.BC))

# remove rows with NoBC:
md$hBFA2 <- sapply(md$Diverse.BC, function(x) paste0(x) %in% paste0(hBFA2$Diverse.BC))

dips_with_muts <- unique(md[md$has_fitness==TRUE,'Diverse.BC'])
x1 <- tsum2[tsum2$Diverse.BC %in% dips_with_muts,]
with(x1,table(adapted,Subpool.Environment))

md2 <- merge(md,tsum2[,c('Diverse.BC','Subpool.Environment')],by='Diverse.BC',all.x=T,all.y=F,sort=F)
md3 <- dplyr::group_by(md2, Diverse.BC, Subpool.Environment) %>% filter(has_fitness == TRUE, !Subpool.Environment %in% c('SC_2N','pH3_8_2N','Ancestor_YPD_2N')) %>%
  summarise(n_strains = length(Strain)) %>% arrange(Subpool.Environment,desc(n_strains))

md3$Diverse.BC <- factor(md3$Diverse.BC, levels = paste0(unique(md3$Diverse.BC)))

# now plot:
strains_per_BC <- ggplot(md3, aes(x = Diverse.BC, y = n_strains)) + 
  facet_wrap(~ Subpool.Environment, scales = 'free_x', ncol = 7) + 
  geom_bar(stat = "identity") + 
  geom_hline(yintercept = 1, col = "gray40") +
  theme_pth1() + ylab("n. stains per BC") + xlab("Diverse BC") +
  theme(axis.text.x = element_blank()) # OK this fixed things. Looking good!


# now generate plot of BCs per strain:
md4 <- dplyr::group_by(md2, Strain, Subpool.Environment) %>% filter(has_fitness == TRUE, !Subpool.Environment %in% c('SC_2N','pH3_8_2N','Ancestor_YPD_2N')) %>%
  summarise(n_bcs = length(Diverse.BC)) %>% arrange(Subpool.Environment,desc(n_bcs))
md4$V1 <- factor(md4$Strain, levels = paste0(unique(md4$Strain))) # relevel

# now plot
BCs_per_strain <- ggplot(md4, aes(x = V1, y = n_bcs)) + 
  facet_wrap(~ Subpool.Environment, scales = 'free_x', ncol = 7) + 
  geom_bar(stat = "identity") + 
  theme_pth1() + xlab("strain") + ylab("n. BCs per strain") +
  geom_hline(yintercept = 1, col = 'gray40') +
  theme(axis.text.x = element_blank())

# save both figures:
ggsave(strains_per_BC, file = here("plt_figs/2019-APR-11_strains_per_BC_2N_corrected.pdf"),width =10, height = 2)
ggsave(BCs_per_strain, file = here("plt_figs/2019-APR-11_BCs_per_strain_2N_corrected.pdf"),width = 10, height = 2)


# make flag for unique mutations
dip_files4$mut_ID <- paste0(dip_files4$CHROM,'_',dip_files4$POS)

# add in Subpool.Environment:
dip_files5 <- merge(dip_files4, md2, by = c('Strain','Diverse.BC'), sort = F)

BC_mut_counts <- dplyr::group_by(dip_files5,Diverse.BC,Subpool.Environment) %>%
  summarise(n_muts = length(POS),
            n_unique_muts = length(unique(mut_ID)),
            n_strains = length(unique(Strain))) %>% 
  arrange(desc(n_muts))

muts_per_BC <- ggplot(BC_mut_counts, aes(x = n_strains, y = n_unique_muts)) +
  geom_jitter(width = 0.15, height = 0.15, alpha = 0.4) + theme_pth1() + #scale_fill_viridis() + 
  geom_abline(intercept = 0, slope = 1) +
  scale_x_continuous(limits = c(0,20), breaks = seq(0,20,2)) +
  scale_y_continuous(limits = c(0,20), breaks = seq(0,20,2))

ggsave(muts_per_BC, file = here("plt_figs/2019-APR-11_muts_per_BC_2N_corrected.pdf"),width = 2.5, height = 2)

# # get list of barcodes from last time that do not show up this time:
# md.old <- read.table(here("data/mutations/mutations_final_filter_2N_2018-OCT-11.txt"),F,'\t')
# md2.old <- read.table(here("data/mutations/mutations_IG_2N.txt"),F,'\t')
# md.old <- unique(rbind(md.old[,c(1:2)],md2.old[,c(1:2)])) # 402 diploid genomes
# 
# md.old$Diverse.BC <- sapply(md.old$V2, function(x) unlist(strsplit(paste0(x),'_'))[1])
# md.old$Environment.BC <- sapply(md.old$V2, function(x) unlist(strsplit(paste0(x),'_'))[2])
# tsum2$mutation <- sapply(tsum2$Diverse.BC, function(x) paste0(x) %in% paste0(md.old$Diverse.BC))
# 
# # associate Subpool.Environment with Diverse.BC
# dip_files4 <- merge(dip_files3, tsum2[,c('Diverse.BC','Subpool.Environment')],all.x = T)
# md.old2 <- merge(md.old, tsum2[,c('Diverse.BC','Subpool.Environment')],all.x = T)
# missing_bcs <- sort(table(md.old2[!md.old2$Diverse.BC %in% dip_files4$Diverse.BC,'Subpool.Environment']))
# missing_bcs[missing_bcs>0]
# 
# # export missing barcodes
# missing_bcs_data <- md.old2[!md.old2$Diverse.BC %in% dip_files4$Diverse.BC,'Diverse.BC']
# 
# write.csv(sort(md.old2$V1),file=here("data/mutations/2019-APR-11/old_samples_list.csv"),quote=F)

write.csv(dip_files5,file=here("data/mutations/2019-APR-11/2019-APR-11_dip_files5.csv"),quote=F,row.names=F)





#### Re-adjusting barcode association with strain IDs using old mapping ####
# goal will be to use the old mappings to re-map the barcodes given the strain IDs in the re-annotated mutations.
# to do this, I'll go back and use the original files that Gavin sent rather than looking at what Lucas sent.

# re-importing data:






 
# #look at genomes from clones assayed in hBFA2:
# table(unique(md[md$hBFA==1,'Diverse.BC']) %in% unique(hBFA2$Diverse.BC)) # there are 179 genomes from clones from hBFA2.
# # make sure these don't also exist in dBFA2 (something tells me that they should...)
# table(unique(md[md$hBFA==1,'Diverse.BC']) %in% unique(dBFA2$Diverse.BC)) # 145 are also in dBFA2 but for some reason don't have fitness data.
# # there are 34 genomes unique to hBFA2.
# # let's figure out what env they're from:
# dip_genomes_from_dBFA2 <- rev(sort(table(dBFA2$Subpool.Environment[dBFA2$Diverse.BC %in% unique(md[md$hBFA==1,'Diverse.BC'])[unique(md[md$hBFA==1,'Diverse.BC']) %in% unique(dBFA2$Diverse.BC)]])[table(dBFA2$Subpool.Environment[dBFA2$Diverse.BC %in% unique(md[md$hBFA==1,'Diverse.BC'])[unique(md[md$hBFA==1,'Diverse.BC']) %in% unique(dBFA2$Diverse.BC)]])>0]))
# dip_genomes_from_hBFA2 <- rev(sort(table(hBFA2$Subpool.Environment[hBFA2$Diverse.BC %in% unique(md[md$hBFA==1,'Diverse.BC'])[unique(md[md$hBFA==1,'Diverse.BC']) %in% unique(hBFA2$Diverse.BC)]])[table(hBFA2$Subpool.Environment[hBFA2$Diverse.BC %in% unique(md[md$hBFA==1,'Diverse.BC'])[unique(md[md$hBFA==1,'Diverse.BC']) %in% unique(hBFA2$Diverse.BC)]])>0]))
# 
# # dip Diverse.BCs that are in dBFA2:
# dips_dBFA2 <- unique(paste0(dBFA2$Diverse.BC[dBFA2$Diverse.BC %in% unique(md[md$hBFA==1,'Diverse.BC'])]))
# # there are 145 of them.
# # what are their fitnesses??
# 
# tsum2[dips_dBFA2 %in% tsum2$Diverse.BC,]
# #I can basically ignore these since they're from GlyEtOH clones with no likely mutation, since most were neutral at the initial diploid sort.
# #moving on without worrying about these.
# 
# # BUT: why don't I have fitness data for the 127 FLC4 clones??

dmut_t1 <- data.frame(table(tsum2$mutation,tsum2$Subpool.Environment,tsum2$adapted))
names(dmut_t1) <- c('has_mutation','source','adapted','count')

# now re-arrange
dmut_t1 <- dplyr::arrange(dmut_t1,desc(adapted),desc(count))
dmut_t1 <- droplevels(dmut_t1)
dmut_t1$source <- factor(dmut_t1$source, levels = paste0(unique(dmut_t1$source)))

# generate annotations: proportion of adapted BCs with mutation data.
dmut_t2 <- reshape2::dcast(dmut_t1, source + adapted ~ has_mutation, value.var = 'count')
names(dmut_t2)[3:4] <- c('no_mut','yes_mut')
dmut_t3 <- dmut_t2[dmut_t2$adapted==1,]
dmut_t3$all_adapted <- round(dmut_t3$yes_mut / (dmut_t3$no_mut + dmut_t3$yes_mut),2)

# sort, re-level by increasing number of adapted clones with mutations:
dmut_t3 <- dmut_t3[dmut_t3$source %in% dmut_t1$source,]
dmut_t1 <- dplyr::arrange(dmut_t1, desc(has_mutation), desc(adapted), desc(count))
dmut_t1$source <- factor(dmut_t1$source, levels = unique(paste0(dmut_t1$source)))

#dmut_t1b <- dmut_t1[dmut_t1$has_mutation==TRUE & dmut_t1$count > 0,]
# also need to annotate: total number of genomes sequened with fitness data
# need to plot has_mutation subset:
dip_mut_p1 <- ggplot() + 
  geom_bar(data = dmut_t1[dmut_t1$has_mutation==TRUE,], aes(x = source, y = count, fill = factor(adapted)), stat = 'identity', position = position_dodge(0.5), alpha = 0.5) +
  theme_pth1() + scale_fill_manual(values = c('gray40','dodgerblue'), name = 'adapted') +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  ylab("number of unique BCs with mutation data") + 
  xlab("source environment") +
  scale_y_continuous(limits = c(-6,155), breaks = seq(0,150,30)) +
  annotate(geom = "text", label = paste0(dmut_t3$all_adapted), x = dmut_t3$source, y = -6, size = 2)

# save plot!
ggsave(dip_mut_p1, filename = here("plt_figs/2N_adapted_clones_and_mutations_2019-APR-11.pdf"), width = 5, height = 3.5)

# looks like we're good here.. going to compile this plot now.
# exporting list of barcodes that are adapted and have mutation data:
#write.csv(tsum2, file = here("data/dips_fit_and_mut_2018-OCT-16.csv"), quote = F, row.names = F)
write.csv(tsum2, file = here("data/dips_fit_and_mut_2019-APR-11.csv"), quote = F, row.names = F)
