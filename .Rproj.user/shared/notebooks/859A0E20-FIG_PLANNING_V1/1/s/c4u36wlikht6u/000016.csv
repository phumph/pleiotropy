"0","# for all lineages for all bfa.env, calculate empirical quantile of estimated fitness in the distribution of neutral class estimates."
"0","# fastest way will be to derive testing distribution for each bfa.env combination.. excluding CLM and FLC4"
"0","# define bfa.env set I want to look through"
"0","envs <- unique(d4$bfa.env)"
"0","envs <- envs[!envs %in% c('FLC4','CLM')]"
"0","# pass vector of barcodes as neutral set"
"0","neuts <- unique(d4[d4$Subpool.Environment == 'Ancestor_YPD_2N','Full.BC'])"
"0","# define function to do loop, so I can recylce it for each BFA"
"0","calc_neut_t <- function(x, ENVS, NEUTS){"
"0","  # define empty results df"
"0","  res <- data.frame()"
"0","  "
"0","  # loop through environments"
"0","  for (e in 1:length(ENVS)){"
"0","    # extract neutral lineages"
"0","    neut_BCs <- x[(x$Full.BC %in% NEUTS) & (x$bfa.env == ENVS[e]),]"
"0","    "
"0","    # remove any NA or any Inf:"
"0","    neut_BCs <- neut_BCs[!neut_BCs$iva.s == Inf,]"
"0","    "
"0","    # calculate weighted average and weighted sigma for neutral fitness:"
"0","    # fist, define weights."
"0","    # do so proportional to 1/sigma, standardized by sum"
"0","    w <- 1/neut_BCs$iva.s_err"
"0","    "
"0","    # calculate sum of weights:"
"0","    sw <- sum(1/neut_BCs$iva.s_err)"
"0","    "
"0","    # calculate (ML) weighted sum, standardized to sum of weights:"
"0","    w_mu <- sum(neut_BCs$iva.s * w) / sw "
"0","    "
"0","    # calculate (ML) weighted standard deviation of this sample"
"0","    w_sd <- sqrt(sum((w/sw) * (neut_BCs$iva.s - w_mu)^2))"
"0","    "
"0","    # return the results for the relevant bfa.env:"
"0","    res <- rbind(res, data.frame(bfa.env = ENVS[e], w_mu = w_mu, w_sd = w_sd))"
"0","  }"
"0","  "
"0","  # merge back to main df, matching by bfa.env"
"0","  x2 <- merge(x, res, by = 'bfa.env', sort = F)"
"0","  "
"0","  # calculate test statistic for all barcodes:"
"0","  x2$t_star  <- (x2$iva.s - x2$w_mu) / (x2$iva.s_err + x2$w_sd)"
"0","  "
"0","  # output the modified df"
"0","  return(x2)"
"0","}"
"0","d5 <- calc_neut_t(d4, ENVS = envs, NEUTS = neuts)"
