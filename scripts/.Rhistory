)
# this function will apply a cutoff rule to flag non-reference BCs to autodip class
assigned_autodip_output <- assign_autodip_status(autodip_dists, cutoff = arguments$cutoff)
cat("Done!\n")
sprintf("Generating plots for output in %s...", arguments$outdir)
# plot for output
plot_autodip_status(autodip_dists,
cutoff    = assigned_autodip_output$cutoff,
outdir    = arguments$outdir,
base_name = arguments$base_name)
# generate flags for original data and return
dat$autodip <- FALSE
dat$autodip[grepl(arguments$autodip_tag, dat$Which.Subpools)] <- TRUE
dat$autodip[dat$Full.BC %in% assigned_autodip_output$bcs] <- TRUE
cat("Done!\n")
res_out <- dat
outfile_path <- file.path(arguments$outdir, paste0(arguments$base_name, '_adapteds_autodips','.csv'))
cat(sprintf("Writing output file: %s\n", outfile_path))
write.table(res_out,
file = outfile_path,
quote = F,
sep = ',',
col.names = T,
row.names = F)
cat("**Script completed successfully!**\n\n")
run_args_parse <- function(debug_status) {
if (debug_status == TRUE) {
arguments <- list()
arguments$use_iva     <- TRUE
arguments$infile      <- c("../data/fitness_data/fitness_calls/dBFA2_cutoff-5_adapteds_2020-03-03.csv","../data/fitness_data/fitness_calls/hBFA1_cutoff-5_adapteds_autodips.csv")
arguments$outdir      <- "../data/fitness_data/fitness_calls/clusters"
arguments$exclude     <- 'CLM|FLC4|Stan|X48Hr|X02M'
arguments$gens        <- 8
} else if (debug_status == FALSE) {
arguments <- docopt(doc, version = 'cluster_lineages.R v.1.0')
}
return(arguments)
}
debug_status <- TRUE
arguments <- run_args_parse(debug_status)
# check + make output dir
if (!dir.exists(arguments$outdir)) {
dir.create(file.path(arguments$outdir))
}
# check + grab input files
if (sum(!sapply(arguments$infile, file.exists)) > 0 ) {
stop("One or more infile does not exist. Please check infile path and try again.", call. = FALSE)
}
# read infiles
#infiles <- sapply(arguments$infile, function(x) OpenRead(file.path(x)))
infiles <- sapply(arguments$infile, function(x) read.table(file.path(x),
sep = ',',
header = T,
stringsAsFactors = F))
head(infiles[[2]])
x<-dat
# goal: retain neutral sets.
x2 <- x[(x[, adapt_col] == TRUE) & (x[, autodip_col] == FALSE), ]
autodip_col = 'autodip'
neutral_col = 'neutral_set'
adapt_col   = 'is_adapted'
# goal: retain neutral sets.
x2 <- x[(x[, adapt_col] == TRUE) & (x[, autodip_col] == FALSE), ]
x2  <- rbind(x2, x[x[, neutral_col] == TRUE, ])
dim(x)
dim(x2)
# goal: retain neutral sets.
x2 <- x[(x[, adapt_col] == TRUE) & (x[, autodip_col] == FALSE), ]
dim(x2)
dim(x)
head(x2)
filter_infiles <- function(x,
adapt_col   = 'is_adapted',
neutral_col = 'neutral_set',
autodip_col = 'autodip') {
# goal: retain neutral sets.
x2 <- x[(x[, adapt_col] == TRUE) & (x[, autodip_col] == FALSE), ]
x2  <- rbind(x2, x[x[, neutral_col] == TRUE, ])
return(x2)
}
filter_infiles <- function(x,
adapt_col   = 'is_adapted',
neutral_col = 'neutral_set',
autodip_col = 'autodip',
retain_neutrals = TRUE) {
# goal: retain neutral sets.
if (autodip_col %in% names(x)) {
x2 <- x[(x[, adapt_col] == TRUE) & (x[, autodip_col] == FALSE), ]
x2  <- rbind(x2, x[x[, neutral_col] == TRUE, ])
} else {
x2 <- x[(x[, adapt_col] == TRUE), ]
}
if (retain_neutrals == TRUE) {
x2  <- rbind(x2, x[x[, neutral_col] == TRUE, ])
}
return(x2)
}
# filter out neutrals and autodips
infiles_filt <- lapply(infiles, filter_infiles)
dim(infiles_filt[[1]])
dim(infiles_filt[[2]])
# prep the matrixes:
fit_prepped <- lapply(infiles,
prep_fit_matrix,
means_only = TRUE,
excludes = arguments$exclude,
iva_s = arguments$use_iva,
gens = arguments$gens)
# check for only share envs among infiles
if (!check_envs(fit_prepped)) {
stop("Environments are not shared between all input files. Exiting.", call. = FALSE)
}
# combine fit_prepped; initiate clustering
dat <- do.call(rbind, fit_prepped)
# assemble meta-data
cdat <- do_cluster(dat)
set.seed(12345)
tsne.norm = Rtsne(dat, pca = FALSE)
ggplot(info.norm, aes(x = tsne1, y = tsne2)) +
geom_point(alpha = 0.3) + theme_bw()
head(dat)
dim(dat)
dim(fit_prepped)
head(fit_prepped)
# combine fit_prepped; initiate clustering
dat <- do.call(rbind, fit_prepped)
dim(dat)
# prep the matrixes:
fit_prepped <- lapply(infiles_filt,
prep_fit_matrix,
means_only = TRUE,
excludes = arguments$exclude,
iva_s = arguments$use_iva,
gens = arguments$gens)
# filter out neutrals and autodips
infiles_filt <- lapply(infiles, filter_infiles)
head(infiles_filt)
x <- fit_prepped[[1]]
head(x)
x <- infiles[[1]]
head(x)
adapt_col   = 'is_adapted'
neutral_col = 'neutral_set'
autodip_col = 'autodip'
retain_neutrals = TRUE
x2 <- x[(x[, adapt_col] == TRUE) & (x[, autodip_col] == FALSE), 'Full.BC']
head(x)
row.names(x)
names(x)
x2 <- x$Full.BC[(x[, adapt_col] == TRUE) & (x[, autodip_col] == FALSE)]
autodip_col = 'autodip'
# goal: retain neutral sets.
if (autodip_col %in% names(x)) {
x2 <- x$Full.BC[(x[, adapt_col] == TRUE) & (x[, autodip_col] == FALSE)]
x2  <- rbind(x2, x$Full.BC[x[, neutral_col] == TRUE])
} else {
x2 <- x$Full.BC[(x[, adapt_col] == TRUE)]
}
if (retain_neutrals == TRUE) {
x2  <- rbind(x2, x$Full.BC[x[, neutral_col] == TRUE])
}
x2 <- x$Full.BC[(x[, adapt_col] == TRUE) & (x[, autodip_col] == FALSE)]
x2  <- c(x2, x$Full.BC[x[, neutral_col] == TRUE])
# goal: retain neutral sets.
if (autodip_col %in% names(x)) {
x2 <- x$Full.BC[(x[, adapt_col] == TRUE) & (x[, autodip_col] == FALSE)]
x2  <- c(x2, x$Full.BC[x[, neutral_col] == TRUE])
} else {
x2 <- x$Full.BC[(x[, adapt_col] == TRUE)]
}
if (retain_neutrals == TRUE) {
x2  <- c(x2, x$Full.BC[x[, neutral_col] == TRUE])
}
x2
length(x2)
filter_to_focal_bcs <- function(x,
adapt_col   = 'is_adapted',
neutral_col = 'neutral_set',
autodip_col = 'autodip',
retain_neutrals = TRUE) {
# goal: retain neutral sets.
if (autodip_col %in% names(x)) {
x2 <- x$Full.BC[(x[, adapt_col] == TRUE) & (x[, autodip_col] == FALSE)]
x2  <- c(x2, x$Full.BC[x[, neutral_col] == TRUE])
} else {
x2 <- x$Full.BC[(x[, adapt_col] == TRUE)]
}
if (retain_neutrals == TRUE) {
x2  <- c(x2, x$Full.BC[x[, neutral_col] == TRUE])
}
return(x2)
}
# prep the matrixes:
fit_prepped <- lapply(infiles,
prep_fit_matrix,
means_only = TRUE,
excludes = arguments$exclude,
iva_s = arguments$use_iva,
gens = arguments$gens)
# grab barcodes to retain after filtering:
bcs_to_retain <- lapply(infiles, filter_to_focal_bcs,)
bcs_to_retain <- do.call(rbind, bcs_to_retain)
# grab barcodes to retain after filtering:
bcs_to_retain <- lapply(infiles, filter_to_focal_bcs,)
str(bcs_to_retain)
length(bcs_to_retain[[1]])
length(bcs_to_retain[[2]])
do.call(c,bcs_to_retain)
do.call(paste0,bcs_to_retain)
# prep the matrixes:
fit_prepped <- lapply(infiles,
prep_fit_matrix,
means_only = TRUE,
excludes = arguments$exclude,
iva_s = arguments$use_iva,
gens = arguments$gens)
# grab barcodes to retain after filtering:
bcs_to_retain <- lapply(infiles, filter_to_focal_bcs,)
bcs_to_retain <- do.call(paste0,bcs_to_retain)
# check for only share envs among infiles
if (!check_envs(fit_prepped)) {
stop("Environments are not shared between all input files. Exiting.", call. = FALSE)
}
# combine fit_prepped; initiate clustering
dat <- do.call(rbind, fit_prepped)
dat <- dat[dat$Full.BC %in% bcs_to_retain, ]
# assemble meta-data
cdat <- do_cluster(dat)
head(dat)
str(dat)
# combine fit_prepped; initiate clustering
dat <- do.call(rbind, fit_prepped)
dat <- dat[row.names(dat) %in% bcs_to_retain, ]
do_cluster <- function(dat, meta) {
set.seed(12345)
tsne.norm = Rtsne(dat, pca = FALSE)
return(tsne.norm)
}
# assemble meta-data
cdat <- do_cluster(dat)
dim(cdat)
dim(dat)
dat
# combine fit_prepped; initiate clustering
dat <- do.call(rbind, fit_prepped)
row.names(dat)
bcs_to_retain
dat[row.names(dat) %in% bcs_to_retain, ]
row.names(dat)
bcs_to_retain
paste0(bcs_to_retain)
c(bcs_to_retain)
row.names(dat) %in% c(bcs_to_retain)
table(row.names(dat) %in% c(bcs_to_retain))
bcs_to_retain
head(bcs_to_retain)
head(x)
autodip_col %in% names(x)
x$Full.BC
x[, adapt_col] == TRUE
x$Full.BC[x[, adapt_col] == TRUE]
retain_neutrals == TRUE
x2
x[, neutral_col] == TRUE]
x[, neutral_col] == TRUE
x$Full.BC[x[, neutral_col] == TRUE]
c(x2, x$Full.BC[x[, neutral_col] == TRUE])
filter_to_focal_bcs <- function(x,
adapt_col   = 'is_adapted',
neutral_col = 'neutral_set',
autodip_col = 'autodip',
retain_neutrals = TRUE) {
# goal: retain neutral sets.
if (autodip_col %in% names(x)) {
x2 <- x$Full.BC[(x[, adapt_col] == TRUE) & (x[, autodip_col] == FALSE)]
x2  <- c(x2, x$Full.BC[x[, neutral_col] == TRUE])
} else {
x2 <- x$Full.BC[x[, adapt_col] == TRUE]
}
if (retain_neutrals == TRUE) {
x2  <- c(x2, x$Full.BC[x[, neutral_col] == TRUE])
}
return(x2)
}
# prep the matrixes:
fit_prepped <- lapply(infiles,
prep_fit_matrix,
means_only = TRUE,
excludes = arguments$exclude,
iva_s = arguments$use_iva,
gens = arguments$gens)
# grab barcodes to retain after filtering:
bcs_to_retain <- lapply(infiles, filter_to_focal_bcs,)
head(bcs_to_retain)
do.call(c,bcs_to_retain)
bcs_to_retain <- do.call(c,bcs_to_retain)
# combine fit_prepped; initiate clustering
dat <- do.call(rbind, fit_prepped)
dat[row.names(dat) %in% c(bcs_to_retain), ]
dat <- dat[row.names(dat) %in% c(bcs_to_retain), ]
# assemble meta-data
cdat <- do_cluster(dat)
info.norm <- data.frame(tsne1 = cdat$Y[, 1],
tsne2 = cdat$Y[, 2])
# plot t-sne
ggplot(info.norm, aes(x = tsne1, y = tsne2)) +
geom_point(alpha = 0.3) + theme_bw()
bcs_to_retain <- lapply(infiles, filter_to_focal_bcs, retain_neutrals = FALSE)
bcs_to_retain <- do.call(c, bcs_to_retain)
# check for only share envs among infiles
if (!check_envs(fit_prepped)) {
stop("Environments are not shared between all input files. Exiting.", call. = FALSE)
}
# combine fit_prepped; initiate clustering
dat <- do.call(rbind, fit_prepped)
dat <- dat[row.names(dat) %in% c(bcs_to_retain), ]
# FIX THIS PART!
# assemble meta-data
cdat <- do_cluster(dat)
info.norm <- data.frame(tsne1 = cdat$Y[, 1],
tsne2 = cdat$Y[, 2])
# plot t-sne
ggplot(info.norm, aes(x = tsne1, y = tsne2)) +
geom_point(alpha = 0.3) + theme_bw()
str(cdat)
head(cdat$origD)
dim(cdat$Y)
dim(dat)
head(dat)
fit_cols <- names(dat)
fit_cols
fit_cols <- colnames(dat)
fit_cols
head(infiles)
do.call(rbind, infiles)
names(infiles[[1]])
x <- infiles[[1]]
head(x)
target_names = c('Subpool.Environment','Which.Subpools')
x2 <- x[, c('Full.BC', target_names) %in% colnames]
x2 <- x[, c('Full.BC', target_names) %in% colnames(x)]
head(x2)
x2 <- x[, c('Full.BC', target_names) %in% names(x)]
head(x2)
x2 <- x[, names(x) %in% c('Full.BC', target_names)]
head(x2)
x2$ploidy <- sapply(x2$Subpool.Environment, function(x) ifelse(grepl('2N',x),'2N','1N'))
table(x2$ploidy)
row.names(dat)
bcs = row.names(dat)
x2 <- x[x$Full.BC %in% bcs, names(x) %in% c('Full.BC', target_names)]
dim(x2)
unique(x2$Subpool.Environment)
table(x2$Subpool.Environment)
s <- x2$Subpool.Environment[1]
s
unlist(strsplit(s, '_'))
tmp <- unlist(strsplit(s, '_'))
pop(tmp)
tmp[1:(length(tmp) - 1)]
x2$source_env <- sapply(x2$Subpool.Environment,
function(s) {
tmp <- unlist(strsplit(s, '_'))
tmp[1:(length(tmp) - 1)]
})
x2$source_env %>% unique()
x2$source_env <- sapply(x2$Subpool.Environment,
function(s) {
tmp <- unlist(strsplit(s, '_'))
paste0(tmp[1:(length(tmp) - 1)], sep = '_')
})
x2$source_env
paste0(tmp[1:(length(tmp) - 1)], sep = '_')
paste0(tmp[1:(length(tmp) - 1)], collapse = '_')
x2$source_env <- sapply(x2$Subpool.Environment,
function(s) {
tmp <- unlist(strsplit(s, '_'))
paste0(tmp[1:(length(tmp) - 1)], collapse = '_')
})
x2$source_env
names(infiles[1])
names(infiles[[1]])
target_names = c('Subpool.Environment','Which.Subpools', 'neutral_set')
x2 <- x[x$Full.BC %in% bcs, names(x) %in% c('Full.BC', target_names)]
# parse to source_env and ploidy
x2$ploidy     <- sapply(x2$Subpool.Environment, function(x) ifelse(grepl('2N',x),'2N','1N'))
x2$source_env <- sapply(x2$Subpool.Environment,
function(s) {
tmp <- unlist(strsplit(s, '_'))
paste0(tmp[1:(length(tmp) - 1)], collapse = '_')
})
head(x2)
table(x2$neutral_set, x2$source_env)
table(x2$source_env)
x2$source_env <- sapply(x2$source_env, function(x) ifelse(grepl('YPD',x),'YPD',x))
table(x2$source_env)
grab_metadata <- function(x,
bcs,
target_names = c('Subpool.Environment','Which.Subpools', 'neutral_set')) {
x2 <- x[x$Full.BC %in% bcs, names(x) %in% c('Full.BC', target_names)]
# parse to source_env and ploidy
x2$ploidy     <- sapply(x2$Subpool.Environment, function(x) ifelse(grepl('2N',x),'2N','1N'))
x2$source_env <- sapply(x2$Subpool.Environment,
function(s) {
tmp <- unlist(strsplit(s, '_'))
paste0(tmp[1:(length(tmp) - 1)], collapse = '_')
})
x2$source_env <- sapply(x2$source_env, function(x) ifelse(grepl('YPD',x),'YPD',x))
}
# grab meta-data from original DFs
meta <- lapply(infiles, grab_metadata, bcs = row.names(dat))
head(meta[[1]])
meta[[1]]
grab_metadata(infiles[[1]], bcs = row.names(dat))
grab_metadata <- function(x,
bcs,
target_names = c('Subpool.Environment','Which.Subpools', 'neutral_set')) {
x2 <- x[x$Full.BC %in% bcs, names(x) %in% c('Full.BC', target_names)]
# parse to source_env and ploidy
x2$ploidy     <- sapply(x2$Subpool.Environment, function(x) ifelse(grepl('2N',x),'2N','1N'))
x2$source_env <- sapply(x2$Subpool.Environment,
function(s) {
tmp <- unlist(strsplit(s, '_'))
paste0(tmp[1:(length(tmp) - 1)], collapse = '_')
})
x2$source_env <- sapply(x2$source_env, function(x) ifelse(grepl('YPD',x),'YPD',x))
return(x2)
}
# combine fit_prepped; initiate clustering
dat <- do.call(rbind, fit_prepped)
dat <- dat[row.names(dat) %in% c(bcs_to_retain), ]
# grab meta-data from original DFs
meta <- lapply(infiles, grab_metadata, bcs = row.names(dat))
head(meta[[1]])
# grab meta-data from original DFs
meta <- lapply(infiles, grab_metadata, bcs = row.names(dat)) %>%
do.call(rbind, .)
dim(meta)
dim(dat)
dim(meta)
row.names(dat)
# join; send to plot
dat <-
dat %>%
dplyr::mutate(Full.BC = row.names())
# join; send to plot
dat <-
dat %>%
dplyr::mutate(Full.BC = row.names(dat))
str(dat)
data.frame(dat)
# join; send to plot
dat <-
dat %>%
data.frame() %>%
dplyr::mutate(Full.BC = row.names(.))
# join; send to plot
dat <-
dat %>%
data.frame() %>%
dplyr::mutate(Full.BC = row.names(.)) %>%
dplyr::left_join(meta, by = 'Full.BC')
head(dat)
dat %>%
data.frame() %>%
dplyr::mutate(Full.BC = row.names())
dat %>%
data.frame() %>%
dplyr::mutate(Full.BC = row.names(.))
dat <- do.call(rbind, fit_prepped)
dat <- dat[row.names(dat) %in% c(bcs_to_retain), ]
# join; send to plot
dat <-
dat %>%
data.frame()
head(dat)
dat$Full.BC <- row.names(dat)
dat_meta <-
dat %>%
dplyr::left_join(meta, by = 'Full.BC')
head(dat_meta)
dat %>%
dplyr::left_join(meta, by = 'Full.BC') %>%
dplyr::select(Full.BC, .)
dat %>%
dplyr::left_join(meta, by = 'Full.BC') %>%
dplyr::select(Full.BC)
dat_meta <-
dat %>%
dplyr::left_join(meta, by = 'Full.BC') %>%
dplyr::select(Full.BC, everything())
names(dat_meta)
dat_full <-
dat %>%
dplyr::left_join(meta, by = 'Full.BC') %>%
dplyr::select(Full.BC, everything()) %>%
dplyr::mutate(tsne1 = cdat$Y[, 1],
tsne2 = cdat$Y[, 2])
head(dat_full)
# plot t-sne; need to add meta-data for clustering
ggplot(dat_full, aes(x = tsne1, y = tsne2, col = source_env)) +
geom_point(alpha = 0.3) + theme_bw() +
facet_wrap(~ ploidy)
# plot t-sne; need to add meta-data for clustering
ggplot(dat_full, aes(x = tsne1, y = tsne2, col = ploidy)) +
geom_point(alpha = 0.3) + theme_bw() +
facet_wrap(~ source_env) +
scale_color_manual(values = c('darkorange','midnightblue'))
# plot t-sne; need to add meta-data for clustering
ggplot(dat_full, aes(x = tsne1, y = tsne2, col = source_env)) +
geom_point(alpha = 0.3) + theme_bw() +
facet_wrap(~ ploidy)
