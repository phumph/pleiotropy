ylab("n BCs with fitness data") +
xlab("source env") +
annotate(geom = "text", label = paste0(round(ttt2$perc,2)), x = ttt2$source, y = -20, size = 2) #+
#scale_y_continuous(limits = c(-20,600), breaks = seq(0,600,100))
wgs_counts_2N
wgs_counts_2N <- ggplot() +
geom_bar(data = ttt, aes(x = Var2, y = Freq, fill = Var1), stat = 'identity', position = position_dodge(0.5), alpha = 0.5) +
theme_bw() + scale_fill_manual(values = c('gray40','dodgerblue'), name = 'adapted') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("n BCs with fitness data") +
xlab("source env") +
annotate(geom = "text", label = paste0(round(ttt2$perc,2)), x = ttt2$source, y = -20, size = 2) +
scale_y_continuous(limits = c(-20,120), breaks = seq(0,120,20))
wgs_counts_2N
wgs_counts_2N <- ggplot() +
geom_bar(data = ttt, aes(x = Var2, y = Freq, fill = Var1), stat = 'identity', position = position_dodge(0.5), alpha = 0.5) +
theme_bw() + scale_fill_manual(values = c('gray40','dodgerblue'), name = 'adapted') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("n BCs with fitness data") +
xlab("source env") +
annotate(geom = "text", label = paste0(round(ttt2$perc,2)), x = ttt2$source, y = -20, size = 2) +
scale_y_continuous(limits = c(-10,120), breaks = seq(0,120,20))
wgs_counts_2N <- ggplot() +
geom_bar(data = ttt, aes(x = Var2, y = Freq, fill = Var1), stat = 'identity', position = position_dodge(0.5), alpha = 0.5) +
theme_bw() + scale_fill_manual(values = c('gray40','dodgerblue'), name = 'adapted') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("n BCs with fitness data") +
xlab("source env") +
annotate(geom = "text", label = paste0(round(ttt2$perc,2)), x = ttt2$source, y = -10, size = 2) +
scale_y_continuous(limits = c(-10,120), breaks = seq(0,120,20))
wgs_counts_2N
wgs_counts_2N <- ggplot() +
geom_bar(data = ttt, aes(x = Var2, y = Freq, fill = Var1), stat = 'identity', position = position_dodge(0.5), alpha = 0.5) +
theme_bw() + scale_fill_manual(values = c('gray40','dodgerblue'), name = 'adapted') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("n BCs with fitness data") +
xlab("source env") +
annotate(geom = "text", label = paste0(round(ttt2$perc,2)), x = ttt2$source, y = -5, size = 2) +
scale_y_continuous(limits = c(-5,120), breaks = seq(0,120,20))
wgs_counts_2N
wgs_counts_2N <- ggplot() +
geom_bar(data = ttt, aes(x = Var2, y = Freq, fill = Var1), stat = 'identity', position = position_dodge(0.5), alpha = 0.5) +
theme_bw() + scale_fill_manual(values = c('gray40','dodgerblue'), name = 'adapted') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("n BCs with mutation data") +
xlab("source env") +
annotate(geom = "text", label = paste0(round(ttt2$perc,2)), x = ttt2$source, y = -5, size = 2) +
scale_y_continuous(limits = c(-5,120), breaks = seq(0,120,20))
wgs_counts_2N
ttt
ttt2
ttt2 <- dplyr::mutate(ttt2,
total = non_adapted + adapted,
perc = adapted / (adapted + non_adapted))
ttt2
ttt2 <- dplyr::mutate(ttt2,
total = non_adapted + adapted,
perc = round(adapted / (adapted + non_adapted),2))
ttt2
mmm <- data.frame(table(adapteds_wgs$is_adapted,
adapteds_wgs$Subpool.Environment)) %>%
dplyr::arrange(desc(Var1),desc(Freq))
# scrub levels that don't make sense; re-order:
mmm <- mmm[!mmm$Var2 %in% c('none','not_read'),]
mmm$Var2 <- factor(mmm$Var2, levels = paste0(unique(mmm$Var2)))
# supply text annotations:
mmm2 <- reshape2::dcast(mmm, Var2 ~ Var1, value.var = 'Freq')
names(mmm2) <- c('source','non_adapted','adapted')
mmm2 <- dplyr::mutate(mmm2,
total = non_adapted + adapted,
perc = round(adapted / (adapted + non_adapted),2))
wgs_counts_2N <- ggplot() +
geom_bar(data = mmm, aes(x = Var2, y = Freq, fill = Var1), stat = 'identity', position = position_dodge(0.5), alpha = 0.5) +
theme_bw() + scale_fill_manual(values = c('gray40','dodgerblue'), name = 'adapted') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("n BCs with mutation data") +
xlab("source env") +
annotate(geom = "text", label = paste0(round(mmm2$perc,2)), x = mmm2$source, y = -5, size = 2) +
scale_y_continuous(limits = c(-5,120), breaks = seq(0,120,20))
wgs_counts_2N
# generate plottable object:
?ggarrange()
# generate plottable object:
ggarrange(plotlist = list(clone_counts_2N, wgs_counts_2N), labels = c('a','b'), align = hv,
widths = c(1,0.66))
library(ggpubr)
# generate plottable object:
ggarrange(plotlist = list(clone_counts_2N, wgs_counts_2N), labels = c('a','b'), align = hv,
widths = c(1,0.66))
# generate plottable object:
ggarrange(plotlist = list(clone_counts_2N, wgs_counts_2N), labels = c('a','b'), align = 'hv',
widths = c(1,0.66))
# generate plottable object:
ggarrange(plotlist = list(clone_counts_2N, wgs_counts_2N), labels = c('a','b'), align = 'hv',
widths = c(1,0.66), common.legend = T)
# generate plottable object:
ggarrange(plotlist = list(clone_counts_2N, wgs_counts_2N), labels = c('a','b'),
hjust = 0,
vjust = 1,
align = 'hv',
widths = c(1,0.66), common.legend = T)
clone_counts_2N <- ggplot() +
geom_bar(data = ttt, aes(x = Var2, y = Freq, fill = Var1), stat = 'identity', position = position_dodge(0.5), alpha = 0.5) +
theme_bw() + scale_fill_manual(values = c('gray40','dodgerblue'), name = 'adapted') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("n BCs w/fitness") +
xlab("source env") +
annotate(geom = "text", label = paste0(round(ttt2$perc,2)), x = ttt2$source, y = -20, size = 2) +
scale_y_continuous(limits = c(-20,600), breaks = seq(0,600,100))
wgs_counts_2N <- ggplot() +
geom_bar(data = mmm, aes(x = Var2, y = Freq, fill = Var1), stat = 'identity', position = position_dodge(0.5), alpha = 0.5) +
theme_bw() + scale_fill_manual(values = c('gray40','dodgerblue'), name = 'adapted') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("n BCs w/wgs data") +
xlab("source env") +
annotate(geom = "text", label = paste0(round(mmm2$perc,2)), x = mmm2$source, y = -5, size = 2) +
scale_y_continuous(limits = c(-5,120), breaks = seq(0,120,20))
# generate plottable object:
ggarrange(plotlist = list(clone_counts_2N, wgs_counts_2N), labels = c('a','b'),
hjust = 0,
vjust = 1,
align = 'hv',
widths = c(1,0.66), common.legend = T)
ttt <- data.frame(table(adapteds$is_adapted,
adapteds$Subpool.Environment)) %>%
dplyr::arrange(desc(Var1),desc(Freq))
# scrub levels that don't make sense; re-order:
ttt <- ttt[!ttt$Var2 %in% c('none','not_read'),]
ttt$Var2 <- factor(ttt$Var2, levels = paste0(unique(ttt$Var2)))
# supply text annotations:
ttt2 <- reshape2::dcast(ttt, Var2 ~ Var1, value.var = 'Freq')
names(ttt2) <- c('source','non_adapted','adapted')
ttt2 <- dplyr::mutate(ttt2, perc = adapted / (adapted + non_adapted))
clone_counts_2N <- ggplot() +
geom_bar(data = ttt, aes(x = Var2, y = Freq, fill = Var1), stat = 'identity', position = position_dodge(0.5), alpha = 0.5) +
theme_bw() + scale_fill_manual(values = c('gray40','dodgerblue'), name = 'adapted') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("n BCs w/fitness") +
xlab("source env") +
annotate(geom = "text", label = paste0(round(ttt2$perc,2)), x = ttt2$source, y = -20, size = 2) +
scale_y_continuous(limits = c(-20,600), breaks = seq(0,600,100))
adapteds_wgs <- adapteds[adapteds$wgs == TRUE, ]
mmm <- data.frame(table(adapteds_wgs$is_adapted,
adapteds_wgs$Subpool.Environment)) %>%
dplyr::arrange(desc(Var1),desc(Freq))
# scrub levels that don't make sense; re-order:
mmm <- mmm[!mmm$Var2 %in% c('none','not_read'),]
mmm$Var2 <- factor(mmm$Var2, levels = paste0(unique(mmm$Var2)))
# supply text annotations:
mmm2 <- reshape2::dcast(mmm, Var2 ~ Var1, value.var = 'Freq')
names(mmm2) <- c('source','non_adapted','adapted')
mmm2 <- dplyr::mutate(mmm2,
total = non_adapted + adapted,
perc = round(adapted / (adapted + non_adapted),2))
wgs_counts_2N <- ggplot() +
geom_bar(data = mmm, aes(x = Var2, y = Freq, fill = Var1), stat = 'identity', position = position_dodge(0.5), alpha = 0.5) +
theme_bw() + scale_fill_manual(values = c('gray40','dodgerblue'), name = 'adapted') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("n BCs w/wgs data") +
xlab("source env") +
annotate(geom = "text", label = paste0(round(mmm2$perc,2)), x = mmm2$source, y = -5, size = 2) +
scale_y_continuous(limits = c(-5,120), breaks = seq(0,120,20))
# generate plottable object:
ggarrange(plotlist = list(clone_counts_2N, wgs_counts_2N), labels = c('a','b'),
hjust = 0,
vjust = 1,
align = 'hv',
widths = c(1,0.66), common.legend = T)
clone_counts_bar1 <- ggarrange(plotlist = list(clone_counts_2N, wgs_counts_2N), labels = c('a','b'),
hjust = 0,
vjust = 1,
align = 'hv',
widths = c(1,0.66), common.legend = T)
# generate plottable object:
clone_counts_bar1 <- ggarrange(plotlist = list(clone_counts_2N, wgs_counts_2N), labels = c('a','b'),
hjust = 0,
vjust = 1,
align = 'hv',
widths = c(1,0.66), common.legend = T)
clone_counts_bar1
print(clone_counts_bar1)
print(clone_counts_bar1)
mmm2
ttt2
ttt2 <- dplyr::mutate(ttt2,
total = non_adapted + adapted,
perc = adapted / (adapted + non_adapted))
ttt2
ttt2 <- dplyr::mutate(ttt2,
total = non_adapted + adapted,
perc = round(adapted / (adapted + non_adapted), 2))
ttt2
ttt <- data.frame(table(adapteds$is_adapted,
adapteds$Subpool.Environment)) %>%
dplyr::arrange(desc(Var1),desc(Freq))
# scrub levels that don't make sense; re-order:
ttt <- ttt[!ttt$Var2 %in% c('none','not_read'),]
ttt$Var2 <- factor(ttt$Var2, levels = paste0(unique(ttt$Var2)))
# supply text annotations:
ttt2 <- reshape2::dcast(ttt, Var2 ~ Var1, value.var = 'Freq')
names(ttt2) <- c('source','non_adapted','adapted')
ttt2 <- dplyr::mutate(ttt2,
total = non_adapted + adapted,
perc = round(adapted / (adapted + non_adapted), 2))
ttt2
kable(ttt2) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
library(knitr)
library(kableExtra)
library(dplyr)
library(tidyr)
library(knitr)
library(ggplot2)
library(ggpubr)
kable(ttt2) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
pack_rows("Mean", 1, 15) %>%
pack_rows("Diff", 16, 30)
kable(ttt2) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
rbind(ttt2,mmm2)
kable(rbind(ttt2,mmm2)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
pack_rows("fitness data", 1, 12) %>%
pack_rows("wgs data", 13, 19)
head(adapteds)
# bring in adapteds
adapteds <- read.table(file = file.path(arguments$adapteds),
header = T,
sep = ',',
stringsAsFactors = F)
# subset columns to focal_cols
fit_val <- ifelse(arguments$use_iva == TRUE, 'iva_s', 'ave_s')
focal_cols <- c('Full.BC','Diverse.BC','Environment.BC','Subpool.Environment','Which.Subpools',
grep(fit_val, names(adapteds), value = T),
'maha_dist','dist_pval','is_adapted','neutral_set')
adapteds <- adapteds[, names(adapteds) %in% focal_cols]
# bring in variants
variants <- read.table(file = file.path(arguments$variants),
header = T,
sep = ',',
stringsAsFactors = F)
# add flag whether we have WGS data
adapteds$wgs <- FALSE
adapteds$wgs[adapteds$Full.BC %in% variants$Full.BC] <- TRUE
head(adapteds)
# generate fitness clusters:
x <- adapteds
head(x)
focal_cols
focal_cols <- focal_cols[focal_cols %in% c('Diverse.BC','Environment.BC','maha_dist','dist_pval','is_adapted','neutral_set','Which.Subpools')]
# bring in adapteds
adapteds <- read.table(file = file.path(arguments$adapteds),
header = T,
sep = ',',
stringsAsFactors = F)
# subset columns to focal_cols
fit_val <- ifelse(arguments$use_iva == TRUE, 'iva_s', 'ave_s')
focal_cols <- c('Full.BC','Diverse.BC','Environment.BC','Subpool.Environment','Which.Subpools',
grep(fit_val, names(adapteds), value = T),
'maha_dist','dist_pval','is_adapted','neutral_set')
adapteds <- adapteds[, names(adapteds) %in% focal_cols]
# bring in variants
variants <- read.table(file = file.path(arguments$variants),
header = T,
sep = ',',
stringsAsFactors = F)
# add flag whether we have WGS data
adapteds$wgs <- FALSE
adapteds$wgs[adapteds$Full.BC %in% variants$Full.BC] <- TRUE
# generate fitness clusters:
x <- adapteds
focal_cols2 <- focal_cols[!focal_cols %in% c('Diverse.BC','Environment.BC','maha_dist','dist_pval','is_adapted','neutral_set','Which.Subpools')]
the_cols <- focal_cols[!focal_cols %in% c('Diverse.BC','Environment.BC','maha_dist','dist_pval','is_adapted','neutral_set','Which.Subpools')]
head(x)
x %>%
dplyr::select(the_cols)
the_cols <- focal_cols[!focal_cols %in% c('Diverse.BC',
'Environment.BC',
'maha_dist',
'dist_pval',
'is_adapted',
'neutral_set',
'Which.Subpools',
grep('_err%', focal_cols, value = T))]
the_cols
the_cols <- focal_cols[!focal_cols %in% c('Diverse.BC',
'Environment.BC',
'maha_dist',
'dist_pval',
'is_adapted',
'neutral_set',
'Which.Subpools',
grep('_err$', focal_cols, value = T))]
the_cols
arguments$exclude  <- 'Stan'
the_cols <- focal_cols[!focal_cols %in% c('Diverse.BC',
'Environment.BC',
'maha_dist',
'dist_pval',
'is_adapted',
'neutral_set',
'Which.Subpools',
grep('_err$', focal_cols, value = T),
grep(arguments$exclude, focal_cols, value = T))]
the_cols
x %>%
dplyr::select(the_cols)
x %>%
dplyr::select(the_cols) %>%
tidyr::gather(key = 'bfa_env', value = 'fitness', -Full.BC, -Subpool.Environment)
table(bfa_envs)
table(bfa_env)
names(adapteds)
x <-
x %>%
dplyr::select(the_cols) %>%
tidyr::gather(key = 'bfa_env', value = 'fitness', -Full.BC, -Subpool.Environment, -wgs)
focal_cols
# generate fitness clusters:
x <- adapteds
the_cols <- focal_cols[!focal_cols %in% c('Diverse.BC',
'Environment.BC',
'maha_dist',
'dist_pval',
'is_adapted',
'neutral_set',
'Which.Subpools',
grep('_err$', focal_cols, value = T),
grep(arguments$exclude, focal_cols, value = T))]
x <-
x %>%
dplyr::select(the_cols, wgs)
# generate fitness clusters:
x <- adapteds
the_cols <- focal_cols[!focal_cols %in% c('Diverse.BC',
'Environment.BC',
'maha_dist',
'dist_pval',
'is_adapted',
'neutral_set',
'Which.Subpools',
grep('_err$', focal_cols, value = T),
grep(arguments$exclude, focal_cols, value = T))]
x <-
x %>%
dplyr::select(the_cols, wgs) %>%
tidyr::gather(key = 'bfa_env', value = 'fitness', -Full.BC, -Subpool.Environment, -wgs)
table(x$bfa_env)
head(x)
ggplot(x, aes(x = bfa_env, y = fitness, group = Full.BC, col = Subpool.Environment)) +
facet_grid(wgs ~ Subpool.Environment) +
geom_line()
ggplot(x, aes(x = bfa_env, y = fitness, group = Full.BC, col = Subpool.Environment)) +
facet_grid(Subpool.Environment ~ wgs) +
geom_line()
arguments$gens     <- 8
table(x$Subpool.Environment)
# generate fitness clusters:
x <- adapteds
the_cols <- focal_cols[!focal_cols %in% c('Diverse.BC',
'Environment.BC',
'maha_dist',
'dist_pval',
'is_adapted',
'neutral_set',
'Which.Subpools',
grep('_err$', focal_cols, value = T),
grep(arguments$exclude, focal_cols, value = T))]
x <-
x %>%
dplyr::select(the_cols, wgs) %>%
tidyr::gather(key = 'bfa_env', value = 'fitness', -Full.BC, -Subpool.Environment, -wgs) %>%
dplyr::filter(!Subpool.Environment %in% c('none','not read'))
ggplot(x, aes(x = bfa_env, y = fitness / as.double(arguments$gens), group = Full.BC, col = Subpool.Environment)) +
facet_grid(Subpool.Environment ~ wgs, scales = 'free_y') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0, size = 2)) +
geom_line(alpha = 0.4)
ggplot(x, aes(x = bfa_env, y = fitness / as.double(arguments$gens), group = Full.BC, col = Subpool.Environment)) +
facet_grid(Subpool.Environment ~ wgs, scales = 'free_y') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0, size = 6),
legend.position = 'none') +
geom_line(alpha = 0.4)
# generate fitness clusters:
x <- adapteds
the_cols <- focal_cols[!focal_cols %in% c('Diverse.BC',
'Environment.BC',
'maha_dist',
'dist_pval',
'is_adapted',
'neutral_set',
'Which.Subpools',
grep('_err$', focal_cols, value = T),
grep(arguments$exclude, focal_cols, value = T))]
x <-
x %>%
dplyr::filter(is_adapted == TRUE) %>%
dplyr::select(the_cols, wgs) %>%
tidyr::gather(key = 'bfa_env', value = 'fitness', -Full.BC, -Subpool.Environment, -wgs) %>%
dplyr::filter(!Subpool.Environment %in% c('none','not read'))
ggplot(x, aes(x = bfa_env, y = fitness / as.double(arguments$gens), group = Full.BC, col = Subpool.Environment)) +
facet_grid(Subpool.Environment ~ wgs, scales = 'free_y') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0, size = 6),
legend.position = 'none') +
geom_line(alpha = 0.4) +
ylab('s per gen')
# generate fitness clusters:
x <- adapteds
head(x)
x %>%
dplyr::filter(is_adapted == TRUE) %>%
dplyr::select(the_cols, wgs)
x %>%
dplyr::filter(is_adapted == TRUE) %>%
dplyr::select(the_cols, wgs) %>% names()
# generate fitness clusters:
x <- adapteds
the_cols <- focal_cols[!focal_cols %in% c('Diverse.BC',
'Environment.BC',
'maha_dist',
'dist_pval',
'is_adapted',
'neutral_set',
'Which.Subpools',
grep('_err$', focal_cols, value = T),
grep(arguments$exclude, focal_cols, value = T))]
x <-
x %>%
dplyr::filter(is_adapted == TRUE) %>%
dplyr::select(the_cols, wgs) %>%
dplyr::mutate(CLM.iva_s = CLM.iva_s / 10,
FLC4.iva_s = FLC4.iva_s / 10) %>%
tidyr::gather(key = 'bfa_env', value = 'fitness', -Full.BC, -Subpool.Environment, -wgs) %>%
dplyr::filter(!Subpool.Environment %in% c('none','not read'))
ggplot(x, aes(x = bfa_env, y = fitness / as.double(arguments$gens), group = Full.BC, col = Subpool.Environment)) +
facet_grid(Subpool.Environment ~ wgs, scales = 'free_y') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 0, size = 6),
legend.position = 'none') +
geom_line(alpha = 0.4) +
ylab('s per gen')
fit_plot_1 <- ggplot(x, aes(x = bfa_env, y = fitness / as.double(arguments$gens), group = Full.BC, col = Subpool.Environment)) +
facet_grid(Subpool.Environment ~ wgs) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 0, size = 6),
legend.position = 'none') +
geom_line(alpha = 0.33) +
ylab('s per gen') +
geom_hline(yintercept = 0, col = 'black')
print(fit_plot_1)
print(fit_plot_1)
fit_plot_1 <- ggplot(x, aes(x = bfa_env, y = fitness / as.double(arguments$gens), group = Full.BC, col = Subpool.Environment)) +
facet_grid(Subpool.Environment ~ wgs) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 0, size = 6),
legend.position = 'none') +
geom_line(alpha = 0.33) +
ylab('s per gen') +
geom_hline(yintercept = 0, col = 'black') +
scale_y_continuous(limits = c(-0.2,0.1), breaks = seq(-0.2,0.1,0.025))
print(fit_plot_1)
print(fit_plot_1)
fit_plot_1 <- ggplot(x, aes(x = bfa_env, y = fitness / as.double(arguments$gens), group = Full.BC, col = Subpool.Environment)) +
facet_grid(Subpool.Environment ~ wgs) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1, size = 6),
legend.position = 'none') +
geom_line(alpha = 0.33) +
ylab('s per gen') +
geom_hline(yintercept = 0, col = 'black') +
scale_y_continuous(limits = c(-0.2,0.1), breaks = seq(-0.2,0.1,0.025))
print(fit_plot_1)
fit_plot_1 <- ggplot(x, aes(x = bfa_env, y = fitness / as.double(arguments$gens), group = Full.BC, col = Subpool.Environment)) +
facet_grid(Subpool.Environment ~ wgs) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 0.5, size = 6),
legend.position = 'none') +
geom_line(alpha = 0.33) +
ylab('s per gen') +
geom_hline(yintercept = 0, col = 'black') +
scale_y_continuous(limits = c(-0.2,0.1), breaks = seq(-0.2,0.1,0.025))
print(fit_plot_1)
fit_plot_1 <- ggplot(x, aes(x = bfa_env, y = fitness / as.double(arguments$gens), group = Full.BC, col = Subpool.Environment)) +
facet_grid(Subpool.Environment ~ wgs) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 0, size = 6),
legend.position = 'none') +
geom_line(alpha = 0.33) +
ylab('s per gen') +
geom_hline(yintercept = 0, col = 'black') +
scale_y_continuous(limits = c(-0.2,0.1), breaks = seq(-0.2,0.1,0.025))
print(fit_plot_1)
fit_plot_1 <- ggplot(x, aes(x = bfa_env, y = fitness / as.double(arguments$gens), group = Full.BC, col = Subpool.Environment)) +
facet_grid(Subpool.Environment ~ wgs) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 1, size = 6),
legend.position = 'none') +
geom_line(alpha = 0.33) +
ylab('s per gen') +
geom_hline(yintercept = 0, col = 'black') +
scale_y_continuous(limits = c(-0.2,0.1), breaks = seq(-0.2,0.1,0.025))
print(fit_plot_1)
fit_plot_1 <- ggplot(x, aes(x = bfa_env, y = fitness / as.double(arguments$gens), group = Full.BC, col = Subpool.Environment)) +
facet_grid(Subpool.Environment ~ wgs) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0, size = 6),
legend.position = 'none') +
geom_line(alpha = 0.33) +
ylab('s per gen') +
geom_hline(yintercept = 0, col = 'black') +
scale_y_continuous(limits = c(-0.2,0.1), breaks = seq(-0.2,0.1,0.025))
print(fit_plot_1)
