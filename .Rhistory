dip_mut_p1
# save plot!
ggsave(dip_mut_p1, filename = here("plt_figs/2N_adapted_clones_and_mutations_2019-APR-11.pdf"), width = 5, height = 3.5)
head(tsum2)
# looks like we're good here.. going to compile this plot now.
# exporting list of barcodes that are adapted and have mutation data:
#write.csv(tsum2, file = here("data/dips_fit_and_mut_2018-OCT-16.csv"), quote = F, row.names = F)
write.csv(tsum2, file = here("data/dips_fit_and_mut_2019-APR-11.csv"), quote = F, row.names = F)
# dtsum2 <- read.csv(file = here("data/dips_fit_and_mut_2018-OCT-16.csv")) # diploids
dtsum2 <- read.csv(file = here("data/dips_fit_and_mut_2019-APR-11.csv")) # diploids
# load fitness data:
fit1 <- read.csv(here('data/dBFA2_hBFA1_with_adapt_11APR2018.csv'))
df1 <- fit1[fit1$Diverse.BC %in% unique(paste0(dtsum2$Diverse.BC[dtsum2$adapted==1])),]
df1 <- droplevels(df1[!df1$bfa.env %in% c('X48Hr','X37C_Stan'),])
dip_envs <- c('FLC4','CLM','21C','37C','GlyEtOH','02M_NaCl','pH7_3')
# reduce fitness values by factor of 8 in the FLC4 and CLM environments for diploids:
df1[df1$bfa.env %in% c('FLC4','CLM'),'iva.s'] <- df1[df1$bfa.env %in% c('FLC4','CLM'),'iva.s'] / 8
calc_gap <- function(x,y,K){
# sum up the log difference across all reps:
gap <- log(x) - log(y)
gap_mean <- mean(log(x), na.rm = T) - log(y)
gap_sd <- sd(gap, na.rm = T)
return(data.frame(k = K, gap_mean, gap_sd))
}
cluster_by_env <- function(df, envs, kmax = 20, R = 200, ploid = '1N', step = 'find_k', k_df){
require(reshape2)
require(dplyr)
require(ggpubr)
#require(flipCluster)
k_plots <- list()
df_res <- list()
for(i in seq_along(envs)){
# subset input df to target source env
df2 <- df[df$source %in% envs[i] & df$ploidy == ploid,]
kmax <- 20
# truncate kmax:
if (kmax > length(unique(df2$Diverse.BC))){
kmax <- length(unique(df2$Diverse.BC))
}
# cast:
df3 <- reshape2::dcast(df2, Diverse.BC + source ~ bfa.env, value.var = 'iva.s')
#df4 <- as.matrix(df3[,-c(1:2)])
row.names(df3) = df3$Diverse.BC
# get rid of Inf and NA values in fitness vectors
df3[df3==Inf] <- NA
df4 <- df3[complete.cases(df3),]
#Ks <- lapply(as.list(c(1:kmax)), function(x) KMeans(df4, centers = x, output = 'Means table', missing = 'Use partial data'))
Ks <- lapply(as.list(c(1:kmax)), function(x) kmeans(as.matrix(df4[,-c(1:2)]), centers = x, iter.max = 100))
ss <- do.call(rbind,lapply(Ks, function(x) data.frame(WSS = x$tot.withinss, TSS = x$totss, k = length(unique(x$cluster)))))
# do routine if add_k is specified:
if (step == 'add_k'){
# find correct k from input k_df
the_k <- dplyr::filter(k_df, ploidy == ploid, sources == envs[i])$k
if (!is.na(the_k)){
df4$cluster <- Ks[[the_k]]$cluster
# return df with cluster ID represented as new col:
} else {
df4$cluster <- 1
}
df_res[[i]] <- df4 # append modified input data.frame
} else if (step == 'find_k') {
# ss_p1 <- ggplot(ss, aes(x = k, y = WSS)) + geom_point() + geom_line() + theme_pth1() +
#   ggtitle(unique(df3$source))
#
# now perform k-means clustering on permuted datasets to calculat gap statistic in order to select k
R <- 200
Nss <- NULL
for (r in 1:R){
# permute input matrix; sample without replacement:
df5 <- apply(df4,2,function(x) sample(x, length(x), replace = T))
NKs <- lapply(as.list(c(1:kmax)), function(x) kmeans(df4[,-c(1:2)], centers = x, iter.max = 100))
Nss <- rbind(Nss,do.call(rbind,lapply(NKs, function(x) data.frame(WSS = x$tot.withinss, TSS = x$totss, k = length(unique(x$cluster)), R = r))))
}
# now plot distribution for each k:
#Nss <- Nss[-1,]
ss_p2 <- ggplot() + geom_line(data = Nss, aes(x = k, y = WSS, group = factor(R)), alpha = 0.2, col = "gray40") + theme_pth1() +
geom_line(data = ss, aes(x = k, y = WSS), col = "midnightblue") + scale_x_continuous(limits = c(1,kmax), breaks = seq(1,kmax,1)) +
ggtitle(unique(df3$source))
# compute gap statistic:
# it's the expected value of the difference between the withinSS of the null at a given k and the observed:
# need to run through each R:
Nss  <- merge(Nss,ss,by='k',all.x = T, sort = F) %>% dplyr::arrange(k,R)
Nss2 <- split(Nss,Nss$k)
gaps <- do.call(rbind,lapply(Nss2, function(q) calc_gap(q$WSS.x,unique(q$WSS.y),K = unique(q$k))))
gap_plot <- ggplot(gaps, aes(x = k, y = gap_mean, ymin = gap_mean - gap_sd, ymax = gap_mean + gap_sd)) + geom_linerange() +
geom_point() + ggtitle(unique(df3$source)) +
geom_line() +
theme_pth1()
#k_plots[[i]] <- ss_p2
k_plots[[i]] <- ggarrange(plotlist = list(ss_p2,gap_plot), ncol = 2, align = 'hv')
ggsave(k_plots[[i]], filename = paste0(here("plt_figs/cluster_plots/cluster_plot_"),unique(df3$source),'_',ploid,'.pdf'), width = 6, height = 3)
# this just doesn't really look good!
# # calculate slope
# WSSd <- rep(NA,kmax)
# WSSd[1] <- with(ss,WSS[1])
# for(k in 2:kmax){
#   WSSd[k] <- (ss$WSS[k-1] - ss$WSS[k]) #/ ss$WSS[k-1]
# }
#
# now calculate derivative and look for positions of maximum deviation
# this might be a little tricky.. and perhaps a little wonky.
# this will provide some heuristic way to define best k.
# for now, just spit out the plots and do it by hand; this will work for now.
# will have to make input vector for k for each ploidy/source, but that's fine.
} # end of else
} # end of for loop
# decide what to return:
if (step == 'find_k') {
return(k_plots)
} else if (step == 'add_k'){
return(do.call(rbind,df_res))
}
}
DK1 <- cluster_by_env(df = df1, envs = dip_envs, R = 200, kmax = 20, ploid = '2N', step = 'find_k')
k_df <- rbind(data.frame(ploidy = '1N', sources = hap_envs, ks = c(6,7,6)),
data.frame(ploidy = '2N', sources = dip_envs, ks = c(9,9,4,7,16,9,4))
)
DK2 <- cluster_by_env(df = df1, envs = dip_envs, ploid = '2N', step = 'add_k', k_df = k_df)
DK2 <- droplevels(merge(DK2, dtsum2[,names(dtsum2) %in% c('Diverse.BC','mutation')], by = 'Diverse.BC', all.x = TRUE))
DK2
fit_plot_with_mut <- function(x, ploidy){
# step 1: generate full plot with fitness clusters
x2 <- reshape2::melt(x, id.vars = c('Diverse.BC','source','cluster','mutation'), value.name = 'fitness', variable.name = 'bfa.env')
x2$cluster <- factor(x2$cluster)
# define range of data:
#range(x2$fitness)
# produce first plot:
require(scales)
# define palette for n clusters:
the_cols <- hue_pal()(max(as.numeric(x2$cluster)))
the_range <- range(x2$fitness)
if(the_range[1] < -0.2){
the_range[1] <- -0.2
}
pc_all <- ggplot(x2, aes(x = bfa.env, y = fitness, group = Diverse.BC)) +
theme_pth1() + geom_hline(yintercept = 0, lwd = 0.5) +
geom_line(aes(col = cluster), alpha = 0.4) +
ggtitle(paste0(x2$source[1], ' (n = ',length(unique(x2$Diverse.BC)),' BCs)')) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.spacing.y = unit(0.2, 'cm')) +
scale_y_continuous(limits = the_range, breaks = seq(-0.2,0.6,0.05)) +
scale_color_manual(values = the_cols)
# define new colors based on clusters present in resulting sub-df:
all_col_hits <- sort(as.numeric(unique(x2$cluster)))
mut_col_hits <- sort(as.numeric(unique(x2$cluster[x2$mutation==T])))
mut_cols <- the_cols[mut_col_hits]
pc_mut <- ggplot(x2[x2$mutation==T,], aes(x = bfa.env, y = fitness, group = Diverse.BC)) +
theme_pth1() + geom_hline(yintercept = 0, lwd = 0.5) +
geom_line(aes(col = cluster), alpha = 0.4) +
ggtitle(paste0('(n = ',length(unique(x2$Diverse.BC[x2$mutation==T])),' BCs with mutation data)')) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.spacing.y = unit(0.2, 'cm')) +
scale_y_continuous(limits = the_range, breaks = seq(-0.2,0.2,0.05)) +
scale_color_manual(values = mut_cols)
# now generate histogram of cluster abundances and make bar plot like the other types:
muts <- data.frame(with(x2[x2$bfa.env == 'FLC4',], table(cluster,mutation)))
names(muts) <- c('cluster','mutation','count')
bar_mut <- ggplot() + geom_bar(data = muts, aes(x = cluster, y = count, fill = mutation), stat = 'identity', position = position_dodge(0.5), alpha = 0.5) +
theme_pth1() + scale_fill_manual(values = c('gray40','dodgerblue'), name = 'has mutation data') +
#theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("number of unique BCs in cluster") +
xlab("cluster") +
ggtitle("") #+
#scale_y_continuous(limits = c(-3,60), breaks = seq(0,60,10)) +
#annotate(geom = "text", label = paste0(mut_t3$all_adapted), x = mut_t3$source, y = -2, size = 2)
# put it all together:
the_file_name <- paste0(here("plt_figs/fitplots_"),ploidy,'_',x2$source[1],'.pdf')
ggarrange(plotlist = list(pc_all,pc_mut,bar_mut), ncol = 3, widths = c(1,1,0.75), align = 'hv', common.legend = T, legend = 'right') %>%
ggsave(filename = the_file_name, width = 8, height = 2.5)
}
fit_plot_with_mut <- function(x, ploidy){
# step 1: generate full plot with fitness clusters
x2 <- reshape2::melt(x, id.vars = c('Diverse.BC','source','cluster','mutation'), value.name = 'fitness', variable.name = 'bfa.env')
x2$cluster <- factor(x2$cluster)
# define range of data:
#range(x2$fitness)
# produce first plot:
require(scales)
# define palette for n clusters:
the_cols <- hue_pal()(max(as.numeric(x2$cluster)))
the_range <- range(x2$fitness)
if(the_range[1] < -0.2){
the_range[1] <- -0.2
}
pc_all <- ggplot(x2, aes(x = bfa.env, y = fitness, group = Diverse.BC)) +
theme_pth1() + geom_hline(yintercept = 0, lwd = 0.5) +
geom_line(aes(col = cluster), alpha = 0.4) +
ggtitle(paste0(x2$source[1], ' (n = ',length(unique(x2$Diverse.BC)),' BCs)')) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.spacing.y = unit(0.2, 'cm')) +
scale_y_continuous(limits = the_range, breaks = seq(-0.2,0.6,0.05)) +
scale_color_manual(values = the_cols)
# define new colors based on clusters present in resulting sub-df:
all_col_hits <- sort(as.numeric(unique(x2$cluster)))
mut_col_hits <- sort(as.numeric(unique(x2$cluster[x2$mutation==T])))
mut_cols <- the_cols[mut_col_hits]
pc_mut <- ggplot(x2[x2$mutation==T,], aes(x = bfa.env, y = fitness, group = Diverse.BC)) +
theme_pth1() + geom_hline(yintercept = 0, lwd = 0.5) +
geom_line(aes(col = cluster), alpha = 0.4) +
ggtitle(paste0('(n = ',length(unique(x2$Diverse.BC[x2$mutation==T])),' BCs with mutation data)')) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.spacing.y = unit(0.2, 'cm')) +
scale_y_continuous(limits = the_range, breaks = seq(-0.2,0.2,0.05)) +
scale_color_manual(values = mut_cols)
# now generate histogram of cluster abundances and make bar plot like the other types:
muts <- data.frame(with(x2[x2$bfa.env == 'FLC4',], table(cluster,mutation)))
names(muts) <- c('cluster','mutation','count')
bar_mut <- ggplot() + geom_bar(data = muts, aes(x = cluster, y = count, fill = mutation), stat = 'identity', position = position_dodge(0.5), alpha = 0.5) +
theme_pth1() + scale_fill_manual(values = c('gray40','dodgerblue'), name = 'has mutation data') +
#theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("number of unique BCs in cluster") +
xlab("cluster") +
ggtitle("") #+
#scale_y_continuous(limits = c(-3,60), breaks = seq(0,60,10)) +
#annotate(geom = "text", label = paste0(mut_t3$all_adapted), x = mut_t3$source, y = -2, size = 2)
# put it all together:
the_file_name <- paste0(here("plt_figs/fitplots_"),ploidy,'_',x2$source[1],'.pdf')
ggarrange(plotlist = list(pc_all,pc_mut,bar_mut), ncol = 3, widths = c(1,1,0.75), align = 'hv', common.legend = T, legend = 'right') %>%
ggsave(filename = the_file_name, width = 8, height = 2.5)
}
lapply(split(DK2,DK2$source),function(x) fit_plot_with_mut(x, ploidy = '2N_v2'))
table(dip_files5$Subpool.Environment)
head(dip_files5)
mut_counter <- function(x){
#return(data.frame(Diverse.BC = x$Diverse.BC, n_mutations = dim(muts)))
# simply return the data.frame with all unique rows at BC level:
unique(x[,names(x) %in% c('Diverse.BC','locus')])
}
plot_muts_by_cluster <- function(dat,ploidy){
mutp1 <- ggplot(dat, aes(x = locus, y = Diverse.BC, fill = factor(hit))) + geom_tile() +
facet_grid(cluster ~ source, scales = 'free_y', space = 'free') + theme_pth1() + #nrow = length(unique(dat$cluster))
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.position = 'none',
panel.spacing = unit(0.1, "cm")) +
scale_fill_manual(values = c('gray25','dodgerblue')) +
ggtitle(dat$source[1])
ggsave(mutp1, filename = paste0(here("plt_figs/"),'mut_dist_plot_',ploidy,'_',dat$source[1],'.pdf'), width = 5, height = 5)
}
head(DK2)
DK2[DK2$mutation==T,]
dim(DK2[DK2$mutation==T,])
write.csv(dip_files5,file=here("data/mutations/2019-APR-11/2019-APR-11_dip_files5.csv"),quote=F)
write.csv(dip_files5,file=here("data/mutations/2019-APR-11/2019-APR-11_dip_files5.csv"),quote=F,row.names=F)
# load mutation data:
DIPMUTS <- read.csv(file=here("data/mutations/2019-APR-11/2019-APR-11_dip_files5.csv"),quote=F,row.names=F)
# load mutation data:
DIPMUTS <- read.csv(file=here("data/mutations/2019-APR-11/2019-APR-11_dip_files5.csv"))
head(DIPMUTS)
DK2b <- DK2[DK2$mutation==T,] # 205 lineages
dim(DK2b)
DK2b <- DK2[DK2$mutation==T,] # 203 lineages
# load mutation data:
dip_muts <- read.csv(file=here("data/mutations/2019-APR-11/2019-APR-11_dip_files5.csv"))
dip_muts <- dip_muts[dip_muts$Diverse.BC %in% DK2b$Diverse.BC,]
dim(dip_muts)
dip_muts$Diverse.BC %in% DK2b$Diverse.BC
dim(dip_muts)
# load mutation data:
dip_muts <- read.csv(file=here("data/mutations/2019-APR-11/2019-APR-11_dip_files5.csv"))
dim(dip_muts)
# load mutation data:
dip_muts <- read.csv(file=here("data/mutations/2019-APR-11/2019-APR-11_dip_files5.csv"))
DK2b <- DK2[DK2$mutation==T,] # 203 lineages
dip_muts <- dip_muts[dip_muts$Diverse.BC %in% DK2b$Diverse.BC,]
# split on Diverse.BC and count up number of distinct mutations per BC
dip_muts2 <- split(dip_muts, dip_muts$Diverse.BC)
dip_mut_uniques <- do.call(rbind,lapply(dip_muts2,mut_counter))
head(dip_mut_uniques)
mut_counter <- function(x,locus='locus'){
#return(data.frame(Diverse.BC = x$Diverse.BC, n_mutations = dim(muts)))
# simply return the data.frame with all unique rows at BC level:
unique(x[,names(x) %in% c('Diverse.BC',locus)])
}
dip_mut_uniques <- do.call(rbind,lapply(dip_muts2,mut_counter,locus='GENE'))
head(dip_mut_uniques)
head(dip_muts)
mut_counter <- function(x,locus='locus'){
#return(data.frame(Diverse.BC = x$Diverse.BC, n_mutations = dim(muts)))
# simply return the data.frame with all unique rows at BC level:
unique(x[,names(x) %in% c('Diverse.BC',locus)])
}
dip_mut_uniques <- do.call(rbind,lapply(dip_muts2,mut_counter))
# dcast this and sort by colSums
dip_muts2 <- reshape2::dcast(dip_mut_uniques, Diverse.BC ~ locus, fun.aggregate = length)
# dcast this and sort by colSums
dip_muts2 <- reshape2::dcast(dip_mut_uniques, Diverse.BC ~ GENE, fun.aggregate = length)
# split on Diverse.BC and count up number of distinct mutations per BC
dip_muts2 <- split(dip_muts, dip_muts$Diverse.BC)
dip_mut_uniques <- do.call(rbind,lapply(dip_muts2,mut_counter))
dip_mut_uniques
head(dip_mut_uniques)
dip_muts <- read.csv(file=here("data/mutations/2019-APR-11/2019-APR-11_dip_files5.csv"))
DK2b <- DK2[DK2$mutation==T,] # 203 lineages
dip_muts <- dip_muts[dip_muts$Diverse.BC %in% DK2b$Diverse.BC,]
# split on Diverse.BC and count up number of distinct mutations per BC
dip_muts2 <- split(dip_muts, dip_muts$Diverse.BC)
dip_mut_uniques <- do.call(rbind,lapply(dip_muts2,mut_counter,locus='GENE'))
# dcast this and sort by colSums
dip_muts2 <- reshape2::dcast(dip_mut_uniques, Diverse.BC ~ GENE, fun.aggregate = length)
dip_counts_muts <- sort(colSums(dip_muts2[,-c(1)]))
head(dip_counts_muts)
length(dip_counts_muts)
plot(dip_counts_muts)
# ditch all loci with only one hit across the dataset, just to keep plotting simple:
dip_loci_to_ex <- names(dip_counts_muts[dip_counts_muts<2])
row.names(dip_muts2) <- dip_muts2$Diverse.BC
dip_counts_BCs <- sort(rowSums(dip_muts2[,-c(1)]))
# sort columns by sums:
dip_muts2 <- dip_muts2[,c('Diverse.BC',names(dip_counts_muts))]
dip_muts3 <- merge(dip_muts2,DK2b[,names(DK2b) %in% c('Diverse.BC','source','cluster')], all.x = T)
# let's just plot clusters broken down by source and visualize the matrix of mutations:
dip_muts4 <- reshape2::melt(dip_muts3, id.vars = c('Diverse.BC','source','cluster'), variable.name = 'GENE', value.name = 'hit')
dip_muts4 <- droplevels(dip_muts4[!dip_muts4$locus %in% dip_loci_to_ex,])
dip_muts4$locus <- factor(dip_muts4$GENE, levels = rev(paste0(names(dip_counts_muts))))
# also sort Diverse.BC by total number of mutations:
dip_muts4$Diverse.BC <- factor(dip_muts4$Diverse.BC, levels = rev(paste0(names(dip_counts_BCs))))
head(dip_muts4)
row.names(dip_muts2) <- dip_muts2$Diverse.BC
head(dip_muts2)
# sort columns by sums:
dip_muts2 <- dip_muts2[,c('Diverse.BC',names(dip_counts_muts))]
names(DK2b) %in% c('Diverse.BC','source','cluster')
# ditch all loci with only one hit across the dataset, just to keep plotting simple:
dip_loci_to_ex <- names(dip_counts_muts[dip_counts_muts<2])
head(dip_muts2)
row.names(dip_muts2) <- dip_muts2$Diverse.BC
dip_counts_BCs <- sort(rowSums(dip_muts2[,-c(1)]))
# sort columns by sums:
dip_muts2 <- dip_muts2[,c('Diverse.BC',names(dip_counts_muts))]
dim(dip_muts2)
names(dip_muts2)
head(DK2b)
dip_muts3 <- merge(dip_muts2,DK2b[,names(DK2b) %in% c('Diverse.BC','source','cluster')], all.x = T)
head(dip_muts3)
dim(dip_muts3)
dim(dip_muts2)
dim(dip_muts3)
# let's just plot clusters broken down by source and visualize the matrix of mutations:
dip_muts4 <- reshape2::melt(dip_muts3, id.vars = c('Diverse.BC','source','cluster'), variable.name = 'GENE', value.name = 'hit')
head(dip_muts4)
dip_muts4[!dip_muts4$locus %in% dip_loci_to_ex,]
dip_muts4 <- droplevels(dip_muts4[!dip_muts4$GENE %in% dip_loci_to_ex,])
dip_muts4$GENE <- factor(dip_muts4$GENE, levels = rev(paste0(names(dip_counts_muts))))
# also sort Diverse.BC by total number of mutations:
dip_muts4$Diverse.BC <- factor(dip_muts4$Diverse.BC, levels = rev(paste0(names(dip_counts_BCs))))
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[1],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[2],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[3],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[4],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[5],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[6],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[7],], ploidy = '2N_v2')
dip_muts4$locus <- factor(dip_muts4$GENE, levels = rev(paste0(names(dip_counts_muts))))
# also sort Diverse.BC by total number of mutations:
dip_muts4$Diverse.BC <- factor(dip_muts4$Diverse.BC, levels = rev(paste0(names(dip_counts_BCs))))
# export plots
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[1],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[2],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[3],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[4],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[5],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[6],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[7],], ploidy = '2N_v2')
# let's just plot clusters broken down by source and visualize the matrix of mutations:
dip_muts4 <- reshape2::melt(dip_muts3, id.vars = c('Diverse.BC','source','cluster'), variable.name = 'GENE', value.name = 'hit')
head(dip_muts4)
head(dip_muts3)
head(dip_mut_uniques)
head(dip_muts2)
rowSums(dip_muts2[,-c(1)])
sort(rowSums(dip_muts2[,-c(1)]))
plot(sort(rowSums(dip_muts2[,-c(1)])))
hist(sort(rowSums(dip_muts2[,-c(1)])))
hist(sort(rowSums(dip_muts2[,-c(1)])),breaks=50)
mean(sort(rowSums(dip_muts2[,-c(1)]))
)
median(sort(rowSums(dip_muts2[,-c(1)])))
head(DK2b)
dip_muts3 <- merge(dip_muts2,DK2b[,names(DK2b) %in% c('Diverse.BC','source','cluster')], all.x = T)
head(dip_muts3)
# let's just plot clusters broken down by source and visualize the matrix of mutations:
dip_muts4 <- reshape2::melt(dip_muts3, id.vars = c('Diverse.BC','source','cluster'), variable.name = 'GENE', value.name = 'hit')
dplyr::group_by(dip_muts4, Diverse.BC) %>% summarise(tot_hits = length(unique(GENE)))
head(dip_muts4)
dplyr::group_by(dip_muts4, Diverse.BC) %>% summarise(tot_hits = sum(hit))
dplyr::group_by(dip_muts4, Diverse.BC) %>% summarise(tot_hits = sum(hit)) %>% arrange(tot_hits)
#dip_muts4 <- droplevels(dip_muts4[!dip_muts4$GENE %in% dip_loci_to_ex,])
dip_muts4$locus <- factor(dip_muts4$GENE, levels = rev(paste0(names(dip_counts_muts))))
# also sort Diverse.BC by total number of mutations:
dip_muts4$Diverse.BC <- factor(dip_muts4$Diverse.BC, levels = rev(paste0(names(dip_counts_BCs))))
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[1],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[2],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[3],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[4],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[5],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[6],], ploidy = '2N_v2')
plot_muts_by_cluster(dip_muts4[dip_muts4$source==unique(dip_muts4$source)[7],], ploidy = '2N_v2')
head(dip_muts4)
plot(sort(rowSums(dip_muts2[,-c(1)])), col = "black")
rowSums(dip_muts2[,-c(1)])
data.frame(rowSums(dip_muts2[,-c(1)]))
df1 <- data.frame(rowSums(dip_muts2[,-c(1)]))
head(df1)
df1 <- data.frame(sums = rowSums(dip_muts2[,-c(1)]))
ggplot(df1, aes(x = sums)) + geom_bar()
df1 <- data.frame(sums = rowSums(dip_muts2[,-c(1)]))
ggplot(df1, aes(x = sums)) + geom_bar() + theme_pth1() +
scale_x_continuous(limits=c(0,12), breaks = c(1:12))
ggplot(df1, aes(x = sums)) + geom_bar() + theme_pth1() +
scale_x_continuous(limits=c(0,12), breaks = c(1:12)) + xlab("N mutations per BC") +
ylab("count")
ggplot(df1, aes(x = sums)) + geom_bar() + theme_pth1() +
scale_x_continuous(limits=c(0,12), breaks = c(1:12)) + xlab("N mutations per BC") +
ylab("count") %>% ggsave(filename = here("plt_figs/2019-APR-11_n_muts_per_BC.pdf"),width=3,height=2.5)
gp1 <- ggplot(df1, aes(x = sums)) + geom_bar() + theme_pth1() +
scale_x_continuous(limits=c(0,12), breaks = c(1:12)) + xlab("N mutations per BC") +
ylab("count")
ggsave(gp1,filename = here("plt_figs/2019-APR-11_n_muts_per_BC.pdf"),width=3,height=2.5)
head(df1)
head(dip_muts4)
# add in Subpool.Environment
df2 <- merge(df1,unique(dip_muts4[,c('Diverse.BC','source')]))
gp1 <- ggplot(df2, aes(x = sums)) + geom_bar() + theme_pth1() + facet_wrap(~source)+
scale_x_continuous(limits=c(0,12), breaks = c(1:12)) + xlab("N mutations per BC") +
ylab("count")
gp1
# add in Subpool.Environment
df2 <- merge(df1,unique(dip_muts4[,c('Diverse.BC','source')]),all.x=T,all.y=F)
gp1 <- ggplot(df2, aes(x = sums)) + geom_bar() + theme_pth1() + facet_wrap(~source)+
scale_x_continuous(limits=c(0,12), breaks = c(1:12)) + xlab("N mutations per BC") +
ylab("count")
gp1
unique(dip_muts4[,c('Diverse.BC','source')])
head(df1)
dim(df1)
df1$Diverse.BC <- row.names(df1)
# add in Subpool.Environment
df2 <- merge(df1,unique(dip_muts4[,c('Diverse.BC','source')]),all.x=T,all.y=F)
gp1 <- ggplot(df2, aes(x = sums)) + geom_bar() + theme_pth1() + facet_wrap(~source)+
scale_x_continuous(limits=c(0,12), breaks = c(1:12)) + xlab("N mutations per BC") +
ylab("count")
gp1
ggsave(gp1,filename = here("plt_figs/2019-APR-11_n_muts_per_BC.pdf"),width=8,height=5)
ggsave(gp1,filename = here("plt_figs/2019-APR-11_n_muts_per_BC.pdf"),width=7,height=6)
head(dip_muts3)
# 2. number of hits per GENE:
gene_hit_counts <- sort(colSums(dip_muts3[,!names(dip_muts3) %in% c('Diverse.BC','source','cluster')])
# 2. number of hits per GENE:
gene_hit_counts <- sort(colSums(dip_muts3[,!names(dip_muts3) %in% c('Diverse.BC','source','cluster')]))
gene_hit_counts
df3 <- data.frame(sums = gene_hit_counts)
head(df3)
df3$GENE <- row.names(df3)
gp2 <- ggplot(df3, aes(x = sums)) + geom_bar() + theme_pth1() +
scale_x_continuous(limits=c(0,12), breaks = c(1:12)) + xlab("N hits per gene") +
ylab("count")
gp2
head(df3)
tail(df3)
gp2 <- ggplot(df3, aes(x = sums)) + geom_bar() + theme_pth1() +
scale_x_continuous(limits=c(0,20), breaks = seq(0,20,2)) + xlab("N hits per gene") +
ylab("count")
gp2
gp2 <- ggplot(df3, aes(x = sums)) + geom_bar() + theme_pth1() +
scale_x_continuous(limits=c(0,20), breaks = seq(0,20,2)) + xlab("N hits per gene") +
ylab("count") + scale_y_log10()
gp2
gp2 <- ggplot(df3, aes(x = sums)) + geom_bar() + theme_pth1() +
scale_x_continuous(limits=c(0,20), breaks = seq(0,20,2)) + xlab("N hits per gene") +
ylab("count")
gp2
gp2 <- ggplot(df3, aes(x = sums)) + geom_bar() + theme_pth1() +
scale_x_continuous(limits=c(0,20), breaks = seq(0,20,2)) +
scale_y_continuous(limits=c(0,100), breaks = seq(0,100,20)) +
xlab("N hits per gene") +
ylab("count")
gp2
gp2 <- ggplot(df3, aes(x = sums)) + geom_bar() + theme_pth1() +
scale_x_continuous(limits=c(0,20), breaks = seq(0,20,2)) +
scale_y_continuous(limits=c(0,50), breaks = seq(0,50,10)) +
xlab("N hits per gene") +
ylab("count")
gp2
gp2 <- ggplot(df3, aes(x = sums)) + geom_bar() + theme_pth1() +
scale_x_continuous(limits=c(0,21), breaks = seq(0,20,2)) +
scale_y_continuous(limits=c(0,50), breaks = seq(0,50,10)) +
xlab("N hits per gene") +
ylab("count")
gp2
gp2 <- ggplot(df3, aes(x = sums)) + geom_bar() + theme_pth1() +
scale_x_continuous(limits=c(0,21), breaks = seq(0,20,2)) +
#scale_y_continuous(limits=c(0,50), breaks = seq(0,50,10)) +
xlab("N hits per gene") +
ylab("count")
gp2
ggsave(gp2,filename = here("plt_figs/2019-APR-11_n_hits_per_GENE.pdf"),width=3,height=2.5)
pc_all
29+103+17+6+16+14+14
head(dip_muts4)
head(df3)
tail(df3)
tail(df3,10)
tail(df3,20)
tail(df3,50)
tail(df3,60)
head(df3)
sum(df3[df3$sums>1])
sum(df3[df3$sums>1,'sums'])
dim(df3)
length(df3[df3$sums>1,'sums'])
sum(df3$sums)
